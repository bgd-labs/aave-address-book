import fs from 'fs';

import {Pool, pools, governanceV2, GovernanceV2, misc, Misc} from './config';
import {PoolV2WithAddresses, fetchPoolV2Addresses, writeV2Templates} from './generator_v2';
import {PoolV3WithAddresses, fetchPoolV3Addresses, writeV3Templates} from './generator_v3';
import {writeGovV2Templates} from './generator_gov_v2';
import {writeMiscTemplates} from './generator_misc';

async function generateV2Pools(pools: Pool[]) {
  let generatedPools: PoolV2WithAddresses[] = [];

  for (let i = 0; i < pools.length; i++) {
    generatedPools[i] = await fetchPoolV2Addresses(pools[i]).catch((e) => {
      console.log(`
      Could not generate pool for:
      - pool: ${pools[i].name}
      - pool version: ${pools[i].version}
      - trace: ${e.stack}
    `);
      throw new Error('cant generate config');
    });
  }

  return generatedPools.map((addresses) => writeV2Templates(addresses));
}

async function generateV3Pools(pools: Pool[]) {
  let generatedPools: PoolV3WithAddresses[] = [];
  for (let i = 0; i < pools.length; i++) {
    generatedPools[i] = await fetchPoolV3Addresses(pools[i]).catch((e) => {
      console.log(`
      Could not generate pool for:
      - pool: ${pools[i].name}
      - pool version: ${pools[i].version}
      - trace: ${e.stack}
    `);
      throw new Error('cant generate config');
    });
  }

  return generatedPools.map((addresses) => writeV3Templates(addresses));
}

async function generateGovernanceV2(governanceV2: GovernanceV2) {
  return writeGovV2Templates(governanceV2);
}

async function generateMisc(misc: Misc) {
  return writeMiscTemplates(misc);
}

async function generateAddresses() {
  // Create the test for the specified pool
  const aaveAddressBookSolidityTemplate = `// SPDX-License-Identifier: MIT
pragma solidity >=0.6.0;

${pools.reduce((acc, pool) => {
  acc += `import {${pool.name}} from './${pool.name}.sol';\r\n`;
  return acc;
}, '')}

import {AaveGovernanceV2, IGovernanceStrategy} from './AaveGovernanceV2.sol';
import {IAaveEcosystemReserveController, AaveMisc} from './AaveMisc.sol';
\r\n`;
  fs.writeFileSync(`./src/AaveAddressBook.sol`, aaveAddressBookSolidityTemplate);

  const aaveAddressBookJsTemplate = `export * as AaveSafetyModule from './AaveSafetyModule';
  // autogenerated entrypoints\n`;
  fs.writeFileSync(`./src/ts/AaveAddressBook.ts`, aaveAddressBookJsTemplate);
  await Promise.all([
    generateV2Pools(pools.filter((pool) => pool.version === 2)),
    generateV3Pools(pools.filter((pool) => pool.version === 3)),
    generateGovernanceV2(governanceV2),
    generateMisc(misc)
  ]);
}

generateAddresses()
  .then(() => {
    console.log('addresses successfully generated');
    process.exit(0);
  })
  .catch((error) => {
    console.log(error);
    process.exit(1);
  });
