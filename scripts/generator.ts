import fs from "fs";
import prettier from "prettier";

import { Pool, pools } from "./config";
import { generatePoolV2 } from "./generator_v2";
import { generatePoolV3 } from "./generator_v3";

async function generateV2Pools(pools: Pool[]) {
  const generatedPools = await Promise.allSettled(
    pools.map((pool) => generatePoolV2(pool))
  );

  const failedPools = generatedPools.filter(
    (promise) => promise.status === "rejected"
  );

  if (failedPools.length > 0) {
    failedPools.forEach((failedPool: any) => {
      const error = JSON.parse(failedPool.reason.message);
      console.log(`
        Could not generate pool for:
        - pool: ${error.pool.name}
        - pool version: ${error.pool.version}
        - network rpc: ${error.pool.rpc}
        - trace: ${error.stack}
      `);
    });

    throw new Error("Some pools where not properly generated");
  }

  return generatedPools.map((m: any) => m.value);
}

async function generateV3Pools(pools: Pool[]) {
  const generatedPools = await Promise.allSettled(
    pools.map((pool) => generatePoolV3(pool))
  );

  const failedPools = generatedPools.filter(
    (promise) => promise.status === "rejected"
  );

  if (failedPools.length > 0) {
    failedPools.forEach((failedPool: any) => {
      const error = JSON.parse(failedPool.reason.message);
      console.log(`
        Could not generate pool for:
        - pool: ${error.pool.name}
        - pool version: ${error.pool.version}
        - network rpc: ${error.pool.rpc}
        - trace: ${error.stack}
      `);
    });

    throw new Error("Some pools where not properly generated");
  }

  return generatedPools.map((m: any) => m.value);
}

async function generatePools() {
  // Create the test for the specified pool
  const AaveAddressBookSolidityTemplate = `// SPDX-License-Identifier: MIT
pragma solidity >=0.6.0;

${pools.reduce((acc, pool) => {
  acc += `import {${pool.name}} from "./${pool.name}.sol";\r\n`;
  return acc;
}, "")}

import {AaveGovernanceV2, IGovernanceStrategy} from './AaveGovernanceV2.sol';
import {IAaveEcosystemReserveController, AaveMisc} from './AaveMisc.sol';
\r\n`;
  fs.writeFileSync(
    `./src/AaveAddressBook.sol`,
    prettier.format(AaveAddressBookSolidityTemplate, {
      filepath: `./src/AaveAddressBook.sol`,
    })
  );

  const AaveAddressBookJsTemplate = `export * as AaveGovernanceV2 from "./AaveGovernanceV2";
  export * as AaveSafetyModule from "./AaveSafetyModule";
  // autogenerated entrypoints
  ${pools.reduce((acc, pool) => {
    acc += `export * as ${pool.name} from "./${pool.name}";\r\n`;
    return acc;
  }, "")}`;
  fs.writeFileSync(
    `./src/ts/AaveAddressBook.ts`,
    prettier.format(AaveAddressBookJsTemplate, {
      filepath: `./src/ts/AaveAddressBook.ts`,
    })
  );
  await generateV2Pools(pools.filter((pool) => pool.version === 2));
  await generateV3Pools(pools.filter((pool) => pool.version === 3));
}

generatePools()
  .then(() => {
    console.log("pools successfully generated");
    process.exit(0);
  })
  .catch((error) => {
    console.log(error);
    process.exit(1);
  });
