// AUTOGENERATED - MANUALLY CHANGES WILL BE REVERTED BY THE GENERATOR
export const AggregatorInterface_ABI = [
  {
    type: 'function',
    name: 'decimals',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint8',
        internalType: 'uint8',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'description',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'string',
        internalType: 'string',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'getAnswer',
    inputs: [
      {
        name: 'roundId',
        type: 'uint256',
        internalType: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'int256',
        internalType: 'int256',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'getRoundData',
    inputs: [
      {
        name: '_roundId',
        type: 'uint80',
        internalType: 'uint80',
      },
    ],
    outputs: [
      {
        name: 'roundId',
        type: 'uint80',
        internalType: 'uint80',
      },
      {
        name: 'answer',
        type: 'int256',
        internalType: 'int256',
      },
      {
        name: 'startedAt',
        type: 'uint256',
        internalType: 'uint256',
      },
      {
        name: 'updatedAt',
        type: 'uint256',
        internalType: 'uint256',
      },
      {
        name: 'answeredInRound',
        type: 'uint80',
        internalType: 'uint80',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'getTimestamp',
    inputs: [
      {
        name: 'roundId',
        type: 'uint256',
        internalType: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
        internalType: 'uint256',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'latestAnswer',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'int256',
        internalType: 'int256',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'latestRound',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
        internalType: 'uint256',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'latestRoundData',
    inputs: [],
    outputs: [
      {
        name: 'roundId',
        type: 'uint80',
        internalType: 'uint80',
      },
      {
        name: 'answer',
        type: 'int256',
        internalType: 'int256',
      },
      {
        name: 'startedAt',
        type: 'uint256',
        internalType: 'uint256',
      },
      {
        name: 'updatedAt',
        type: 'uint256',
        internalType: 'uint256',
      },
      {
        name: 'answeredInRound',
        type: 'uint80',
        internalType: 'uint80',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'latestTimestamp',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
        internalType: 'uint256',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'event',
    name: 'AnswerUpdated',
    inputs: [
      {
        name: 'current',
        type: 'int256',
        indexed: true,
        internalType: 'int256',
      },
      {
        name: 'roundId',
        type: 'uint256',
        indexed: true,
        internalType: 'uint256',
      },
      {
        name: 'updatedAt',
        type: 'uint256',
        indexed: false,
        internalType: 'uint256',
      },
    ],
    anonymous: false,
  },
  {
    type: 'event',
    name: 'NewRound',
    inputs: [
      {
        name: 'roundId',
        type: 'uint256',
        indexed: true,
        internalType: 'uint256',
      },
      {
        name: 'startedBy',
        type: 'address',
        indexed: true,
        internalType: 'address',
      },
      {
        name: 'startedAt',
        type: 'uint256',
        indexed: false,
        internalType: 'uint256',
      },
    ],
    anonymous: false,
  },
] as const;
